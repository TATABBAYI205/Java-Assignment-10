@ModelAttribute annotation in spring:-
====================================
The @ModelAttribute annotation plays a crucial role in Spring MVC by binding method parameters or method return values to the model attributes. It is used in controller methods to handle incoming data, prepare model attributes, and even bind data to the method's return object.

Here are the main roles and uses of the @ModelAttribute annotation:

1.Binding Request Data to Method Parameters:
   When a controller method is called to handle an incoming HTTP request, Spring attempts to bind the request data to the method's 
   parameters. By annotating a method parameter with @ModelAttribute, you can specify that the parameter should be populated with the data 
   from the request attributes. It allows for data binding between the request and the method's parameters.
Ex:
   @RequestMapping("/save")
   public String saveData(@ModelAttribute("user") User user) {
       // The "user" object will be populated with the data from the request parameters.
       // Process the data and save it to the database.
       return "success";
   }

2. Adding Model Attributes for Views:
   By using @ModelAttribute on a method that returns an object, you can add attributes to the model. These attributes are then made 
   available to the view for rendering. It is commonly used to prepopulate the form fields or provide reference data to the view.
Ex:
   @ModelAttribute("countries")
   public List<String> populateCountries() {
       // Method to populate the list of countries for the view
       return Arrays.asList("USA", "Canada", "UK", "Australia");
   }


3. Data Preprocessing:
   You can use @ModelAttribute on methods to preprocess data before it reaches the controller or before it's sent to the view. This can 
   be helpful when you need to perform certain actions on the data before it's used.
Ex:
   @ModelAttribute("user")
   public User preprocessUserData(@RequestParam("userId") Long userId) {
       // Method to fetch the user data from the database or any other data source
       return userService.getUserById(userId);
   }

4. Form Handling and Data Binding:
   When rendering forms in views, @ModelAttribute helps with form data binding. It ensures that when the form is submitted, the 
   corresponding data is bound to the appropriate model object in the controller method.
Ex:
   @RequestMapping("/update")
   public String updateUser(@ModelAttribute("user") User user) {
       // The "user" object contains the data submitted through the form
       userService.updateUser(user);
       return "redirect:/users";
   }